---
- name: Patch RHEL Systems - Consolidated Playbook
  hosts: rhel_servers # Ensure 'rhel_servers' group exists in your inventory
  become: true # Run tasks with sudo/root privileges
  gather_facts: true # Gather facts like OS version, uptime, etc.

  # Define variables for this playbook run
  vars:
    perform_yum_update: true         # Set to true to perform yum update, false to skip (e.g., for checks only)
    default_reboot_required: true    # Set to true if a reboot is generally expected/desired after patching
                                     # Can be overridden by host-specific variables in inventory
    reboot_timeout_minutes: 5        # Number of minutes to wait after a reboot for the system to come back up
    # Optional: list of repositories to disable during the update (e.g., for specific app repos)
    # disable_repos:
    #   - "epel"
    # Optional: list of repositories to enable during the update
    # enable_repos:
    #   - "custom-updates"

  pre_tasks:
    - name: Start patching process for {{ inventory_hostname }}
      debug:
        msg: "Starting RHEL patching for {{ inventory_hostname }}..."

  tasks:
    # --- Pre-Patch Checks ---
    - name: Pre-patch Check - Ensure connectivity and root access
      ansible.builtin.ping:
      tags: [ 'pre_patch' ]

    - name: Pre-patch Check - Gather package facts
      ansible.builtin.package_facts:
        manager: "auto"
      tags: [ 'pre_patch' ]

    - name: Pre-patch Check - Check for available updates without applying
      ansible.builtin.yum:
        disable_gpg_check: true
        list: updates
      register: yum_updates_check
      changed_when: false
      tags: [ 'pre_patch' ]

    - name: Pre-patch Check - Report available updates
      debug:
        msg: "Available updates on {{ inventory_hostname }}: {{ yum_updates_check.results | map(attribute='name') | list | join(', ') if yum_updates_check.results else 'None' }}"
      when: yum_updates_check.results is defined and yum_updates_check.results | length > 0
      tags: [ 'pre_patch' ]

    - name: Pre-patch Check - Check disk space (root partition)
      ansible.builtin.command: df -h /
      register: disk_space_check
      changed_when: false
      tags: [ 'pre_patch' ]

    - name: Pre-patch Check - Display disk space
      debug:
        msg: "Disk space on {{ inventory_hostname }}: {{ disk_space_check.stdout }}"
      tags: [ 'pre_patch' ]

    - name: Pre-patch Check - Ensure enough free memory (optional)
      ansible.builtin.command: free -h
      register: free_memory_check
      changed_when: false
      tags: [ 'pre_patch' ]

    - name: Pre-patch Check - Display free memory
      debug:
        msg: "Free memory on {{ inventory_hostname }}: {{ free_memory_check.stdout }}"
      tags: [ 'pre_patch' ]

    - name: Pre-patch Check - Check current kernel version
      ansible.builtin.command: uname -r
      register: current_kernel
      changed_when: false
      tags: [ 'pre_patch' ]

    - name: Pre-patch Check - Display current kernel version
      debug:
        msg: "Current kernel on {{ inventory_hostname }}: {{ current_kernel.stdout }}"
      tags: [ 'pre_patch' ]

    # --- Perform Patching ---
    - name: Perform Patching - Clean yum/dnf cache
      ansible.builtin.yum:
        name: "*"
        state: clean
        cacheonly: yes
      when: perform_yum_update | bool
      tags: [ 'patch' ]

    - name: Perform Patching - Update all packages to the latest version
      ansible.builtin.yum:
        name: "*"
        state: latest
        disablerepo: "{{ disable_repos | default(omit) }}"
        enablerepo: "{{ enable_repos | default(omit) }}"
      register: yum_update_result
      when: perform_yum_update | bool
      tags: [ 'patch' ]
      notify: check for reboot # Trigger handler to check if a reboot is needed

    - name: Perform Patching - Report on yum update result
      debug:
        msg: "Yum update on {{ inventory_hostname }} was {{ 'successful' if yum_update_result.changed else 'not needed' }}. {{ yum_update_result.msg | default('') }}"
      when: perform_yum_update | bool
      tags: [ 'patch' ]

    - name: Perform Patching - Check for new kernel installation (if not handled by `needs-restarting`)
      ansible.builtin.command: "rpm -q kernel | tail -n 1"
      register: new_kernel_version
      changed_when: false
      when: perform_yum_update | bool and current_kernel.stdout is defined
      tags: [ 'patch' ]

    - name: Perform Patching - Compare kernel versions for explicit reboot decision
      set_fact:
        new_kernel_installed: "{{ current_kernel.stdout not in new_kernel_version.stdout }}"
      when: perform_yum_update | bool and current_kernel.stdout is defined and new_kernel_version.stdout is defined
      tags: [ 'patch' ]

    - name: Perform Patching - Trigger reboot if new kernel installed OR explicitly required
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout_minutes * 60 }}"
      when: perform_yum_update | bool and ((new_kernel_installed | default(false)) or (default_reboot_required | default(false)))
      tags: [ 'patch' ]

    # --- Post-Patch Validation ---
    - name: Post-patch Validation - Ping after patching (if rebooted)
      ansible.builtin.ping:
      tags: [ 'post_patch' ]

    - name: Post-patch Validation - Verify current kernel version
      ansible.builtin.command: uname -r
      register: post_patch_kernel
      changed_when: false
      tags: [ 'post_patch' ]

    - name: Post-patch Validation - Display new kernel version
      debug:
        msg: "New kernel on {{ inventory_hostname }}: {{ post_patch_kernel.stdout }}"
      tags: [ 'post_patch' ]

    - name: Post-patch Validation - Verify system uptime
      ansible.builtin.command: uptime
      register: uptime_check
      changed_when: false
      tags: [ 'post_patch' ]

    - name: Post-patch Validation - Display system uptime
      debug:
        msg: "Uptime on {{ inventory_hostname }}: {{ uptime_check.stdout }}"
      tags: [ 'post_patch' ]

    - name: Post-patch Validation - Run system health check (critical step - customize!)
      debug:
        msg: "WARNING: Post-patch health check placeholder! Customize this for YOUR applications and services."
      tags: [ 'post_patch' ]
      # Add your specific application health checks here, e.g.:
      # - name: Check specific service status
      #   ansible.builtin.service:
      #     name: httpd
      #     state: started
      #     enabled: true
      # - name: Check application URL
      #   ansible.builtin.uri:
      #     url: "http://{{ inventory_hostname }}:8080/health"
      #     status_code: 200

  post_tasks:
    - name: End patching process for {{ inventory_hostname }}
      debug:
        msg: "Finished RHEL patching for {{ inventory_hostname }}."

  handlers:
    - name: check for reboot
      ansible.builtin.command: needs-restarting -r
      register: reboot_needed_check
      failed_when: false # Don't fail if command returns non-zero (indicating reboot needed)
      changed_when: false

    - name: perform reboot if required by handler
      ansible.builtin.reboot:
        reboot_timeout: "{{ reboot_timeout_minutes * 60 }}"
      when: reboot_needed_check.rc == 1 # needs-restarting -r returns 1 if a reboot is needed
